pipeline:
  name: temp
  identifier: temp
  projectIdentifier: ajhacseng
  orgIdentifier: CSE
  tags: {}
  stages:
    - stage:
        name: teststage
        identifier: teststage
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: Http
                  name: HTTP_1
                  identifier: HTTP_1
                  spec:
                    url: https://httpbin.org/anything
                    method: GET
                    headers: []
                    outputVariables:
                      - name: hostname
                        value: <+json.select(".headers.Host", httpResponseBody)>
                        type: String
                  timeout: 10s
              - step:
                  type: ShellScript
                  name: dummy
                  identifier: dummy
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |+
                          microdnf install jq
                          echo "printing secret"
                          echo <+secret.getValue("account.sshsecretfilenew")>
                          echo "printing secret"
                          echo <+secret.getValue("account.sshsecretfilenew")> > /opt/harness-delegate/secretoutput.txt
                          echo <+secrets.getValue("account.ajhaaccountleveltest")>
                          echo "text secret is: " <+pipeline.variables.testvar>
                          echo <+<+pipeline.variables.envVar>.split('-')[0]>

                          ipaddress="4.4.4.4"

                          BUCKET_NAME=testbucket
                          OBJECT_NAME=testworkflow-2.0.1.jar
                          TARGET_LOCATION=/opt/test/testworkflow-2.0.1.jar

                          JSON_STRING=$( jq -n \
                                            --arg bn "$BUCKET_NAME" \
                                            --arg on "$OBJECT_NAME" \
                                            --arg tl "$TARGET_LOCATION" \
                                            '{bucketname: $bn, objectname: $on, targetlocation: $tl}' )

                          echo $JSON_STRING    

                          echo "using functor"

                          echo <+json.select(".bucketname",${JSON_STRING})>


                    environmentVariables:
                      - name: testpath
                        type: String
                        value: /tmp/def
                    outputVariables:
                      - name: ipaddress
                        type: String
                        value: ipaddress
                    delegateSelectors:
                      - ajha-ng-delegate
                  timeout: 10m
                  failureStrategies: []
        tags: {}
        variables:
          - name: var1
            type: String
            description: ""
            value: dssadasd
          - name: var2
            type: String
            description: ""
            value: dasdad
          - name: EXTRA_TAGS
            type: String
            description: ""
            value: ""
        when:
          pipelineStatus: Success
    - stage:
        name: testtemplatestage
        identifier: testtemplatestage
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  name: testtemplatestep
                  identifier: testtemplatestep
                  template:
                    templateRef: testtemp
                    versionLabel: "1"
                    templateInputs:
                      type: ShellScript
                      spec:
                        environmentVariables:
                          - name: var1
                            type: String
                            value: <+input>
                          - name: var2
                            type: String
                            value: <+input>
        tags: {}
  variables:
    - name: testvar
      type: String
      default: ""
      description: ""
      value: hgjgj
    - name: envVar
      type: String
      description: ""
      value: <+input>.allowedValues(abcd,efgh,dasdad,dadad,eqweqe,thdh)
    - name: dummy
      type: String
      description: ""
      value: dadadsdas
