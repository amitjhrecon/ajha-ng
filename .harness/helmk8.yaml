service:
  name: helmk8
  identifier: helmk8
  orgIdentifier: default
  projectIdentifier: testproject
  serviceDefinition:
    spec:
      manifests:
        - manifest:
            identifier: testhelmk8
            type: HelmChart
            spec:
              store:
                type: Github
                spec:
                  connectorRef: account.ajhagithubaccount
                  gitFetchType: Branch
                  folderPath: helm-chart-sources/helm-chart-test
                  repoName: work-helm
                  branch: main
              subChartPath: ""
              skipResourceVersioning: false
              enableDeclarativeRollback: false
              helmVersion: V3
              fetchHelmChartMetadata: false
        - manifest:
            identifier: valuesoverrides
            type: Values
            spec:
              store:
                type: Github
                spec:
                  connectorRef: account.ajhagithubaccount
                  gitFetchType: Branch
                  paths:
                    - /prashantvalues/
                  repoName: work-helm
                  branch: main
      artifacts:
        primary:
          primaryArtifactRef: <+input>
          sources:
            - identifier: customtrinet
              spec:
                version: <+pipeline.stages.getservicedetails.spec.execution.steps.ShellScript_1.output.outputVariables.artifact.split(',')[<+strategy.iteration>]>
                timeout: 5m
                scripts:
                  fetchAllArtifacts:
                    artifactsArrayPath: $.data
                    versionPath: myartifact
                    spec:
                      shell: Bash
                      source:
                        spec:
                          script: |-
                            cat>>artifactpath.json<<EOF
                            {"myartifact":"<+pipeline.stages.getservicedetails.spec.execution.steps.ShellScript_1.output.outputVariables.artifact.split(',')[<+strategy.iteration>]>"} 
                            EOF

                            microdnf install jq

                            jq -s '{ "data": . }' artifactpath.json > $HARNESS_ARTIFACT_RESULT_PATH
                        type: Inline
              type: CustomArtifact
    type: Kubernetes
